// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lajule/dac/ent/training"
)

// TrainingCreate is the builder for creating a Training entity.
type TrainingCreate struct {
	config
	mutation *TrainingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TrainingCreate) SetCreatedAt(t time.Time) *TrainingCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableCreatedAt(t *time.Time) *TrainingCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetDuration sets the "duration" field.
func (tc *TrainingCreate) SetDuration(i int) *TrainingCreate {
	tc.mutation.SetDuration(i)
	return tc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableDuration(i *int) *TrainingCreate {
	if i != nil {
		tc.SetDuration(*i)
	}
	return tc
}

// SetClosable sets the "closable" field.
func (tc *TrainingCreate) SetClosable(b bool) *TrainingCreate {
	tc.mutation.SetClosable(b)
	return tc
}

// SetNillableClosable sets the "closable" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableClosable(b *bool) *TrainingCreate {
	if b != nil {
		tc.SetClosable(*b)
	}
	return tc
}

// SetStopwatch sets the "stopwatch" field.
func (tc *TrainingCreate) SetStopwatch(i int) *TrainingCreate {
	tc.mutation.SetStopwatch(i)
	return tc
}

// SetNillableStopwatch sets the "stopwatch" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableStopwatch(i *int) *TrainingCreate {
	if i != nil {
		tc.SetStopwatch(*i)
	}
	return tc
}

// SetProgress sets the "progress" field.
func (tc *TrainingCreate) SetProgress(i int) *TrainingCreate {
	tc.mutation.SetProgress(i)
	return tc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableProgress(i *int) *TrainingCreate {
	if i != nil {
		tc.SetProgress(*i)
	}
	return tc
}

// SetAccuracy sets the "accuracy" field.
func (tc *TrainingCreate) SetAccuracy(i int) *TrainingCreate {
	tc.mutation.SetAccuracy(i)
	return tc
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableAccuracy(i *int) *TrainingCreate {
	if i != nil {
		tc.SetAccuracy(*i)
	}
	return tc
}

// SetSpeed sets the "speed" field.
func (tc *TrainingCreate) SetSpeed(i int) *TrainingCreate {
	tc.mutation.SetSpeed(i)
	return tc
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableSpeed(i *int) *TrainingCreate {
	if i != nil {
		tc.SetSpeed(*i)
	}
	return tc
}

// Mutation returns the TrainingMutation object of the builder.
func (tc *TrainingCreate) Mutation() *TrainingMutation {
	return tc.mutation
}

// Save creates the Training in the database.
func (tc *TrainingCreate) Save(ctx context.Context) (*Training, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TrainingCreate) SaveX(ctx context.Context) *Training {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TrainingCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TrainingCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TrainingCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := training.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.Duration(); !ok {
		v := training.DefaultDuration
		tc.mutation.SetDuration(v)
	}
	if _, ok := tc.mutation.Closable(); !ok {
		v := training.DefaultClosable
		tc.mutation.SetClosable(v)
	}
	if _, ok := tc.mutation.Stopwatch(); !ok {
		v := training.DefaultStopwatch
		tc.mutation.SetStopwatch(v)
	}
	if _, ok := tc.mutation.Progress(); !ok {
		v := training.DefaultProgress
		tc.mutation.SetProgress(v)
	}
	if _, ok := tc.mutation.Accuracy(); !ok {
		v := training.DefaultAccuracy
		tc.mutation.SetAccuracy(v)
	}
	if _, ok := tc.mutation.Speed(); !ok {
		v := training.DefaultSpeed
		tc.mutation.SetSpeed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TrainingCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Training.created_at"`)}
	}
	if _, ok := tc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Training.duration"`)}
	}
	if _, ok := tc.mutation.Closable(); !ok {
		return &ValidationError{Name: "closable", err: errors.New(`ent: missing required field "Training.closable"`)}
	}
	if _, ok := tc.mutation.Stopwatch(); !ok {
		return &ValidationError{Name: "stopwatch", err: errors.New(`ent: missing required field "Training.stopwatch"`)}
	}
	if _, ok := tc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "Training.progress"`)}
	}
	if _, ok := tc.mutation.Accuracy(); !ok {
		return &ValidationError{Name: "accuracy", err: errors.New(`ent: missing required field "Training.accuracy"`)}
	}
	if _, ok := tc.mutation.Speed(); !ok {
		return &ValidationError{Name: "speed", err: errors.New(`ent: missing required field "Training.speed"`)}
	}
	return nil
}

func (tc *TrainingCreate) sqlSave(ctx context.Context) (*Training, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TrainingCreate) createSpec() (*Training, *sqlgraph.CreateSpec) {
	var (
		_node = &Training{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(training.Table, sqlgraph.NewFieldSpec(training.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(training.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.Duration(); ok {
		_spec.SetField(training.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := tc.mutation.Closable(); ok {
		_spec.SetField(training.FieldClosable, field.TypeBool, value)
		_node.Closable = value
	}
	if value, ok := tc.mutation.Stopwatch(); ok {
		_spec.SetField(training.FieldStopwatch, field.TypeInt, value)
		_node.Stopwatch = value
	}
	if value, ok := tc.mutation.Progress(); ok {
		_spec.SetField(training.FieldProgress, field.TypeInt, value)
		_node.Progress = value
	}
	if value, ok := tc.mutation.Accuracy(); ok {
		_spec.SetField(training.FieldAccuracy, field.TypeInt, value)
		_node.Accuracy = value
	}
	if value, ok := tc.mutation.Speed(); ok {
		_spec.SetField(training.FieldSpeed, field.TypeInt, value)
		_node.Speed = value
	}
	return _node, _spec
}

// TrainingCreateBulk is the builder for creating many Training entities in bulk.
type TrainingCreateBulk struct {
	config
	builders []*TrainingCreate
}

// Save creates the Training entities in the database.
func (tcb *TrainingCreateBulk) Save(ctx context.Context) ([]*Training, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Training, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrainingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TrainingCreateBulk) SaveX(ctx context.Context) []*Training {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TrainingCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TrainingCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
