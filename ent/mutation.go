// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lajule/dac/ent/predicate"
	"github.com/Lajule/dac/ent/training"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTraining = "Training"
)

// TrainingMutation represents an operation that mutates the Training nodes in the graph.
type TrainingMutation struct {
	config
	op                Op
	typ               string
	id                *int
	created_at        *time.Time
	duration          *int
	addduration       *int
	total_duration    *int
	addtotal_duration *int
	text_length       *int
	addtext_length    *int
	inputs_length     *int
	addinputs_length  *int
	accuracy          *int
	addaccuracy       *int
	speed             *int
	addspeed          *int
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Training, error)
	predicates        []predicate.Training
}

var _ ent.Mutation = (*TrainingMutation)(nil)

// trainingOption allows management of the mutation configuration using functional options.
type trainingOption func(*TrainingMutation)

// newTrainingMutation creates new mutation for the Training entity.
func newTrainingMutation(c config, op Op, opts ...trainingOption) *TrainingMutation {
	m := &TrainingMutation{
		config:        c,
		op:            op,
		typ:           TypeTraining,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrainingID sets the ID field of the mutation.
func withTrainingID(id int) trainingOption {
	return func(m *TrainingMutation) {
		var (
			err   error
			once  sync.Once
			value *Training
		)
		m.oldValue = func(ctx context.Context) (*Training, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Training.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTraining sets the old Training of the mutation.
func withTraining(node *Training) trainingOption {
	return func(m *TrainingMutation) {
		m.oldValue = func(context.Context) (*Training, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrainingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrainingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrainingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrainingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Training.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TrainingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TrainingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TrainingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDuration sets the "duration" field.
func (m *TrainingMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *TrainingMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *TrainingMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *TrainingMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *TrainingMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetTotalDuration sets the "total_duration" field.
func (m *TrainingMutation) SetTotalDuration(i int) {
	m.total_duration = &i
	m.addtotal_duration = nil
}

// TotalDuration returns the value of the "total_duration" field in the mutation.
func (m *TrainingMutation) TotalDuration() (r int, exists bool) {
	v := m.total_duration
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalDuration returns the old "total_duration" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldTotalDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalDuration: %w", err)
	}
	return oldValue.TotalDuration, nil
}

// AddTotalDuration adds i to the "total_duration" field.
func (m *TrainingMutation) AddTotalDuration(i int) {
	if m.addtotal_duration != nil {
		*m.addtotal_duration += i
	} else {
		m.addtotal_duration = &i
	}
}

// AddedTotalDuration returns the value that was added to the "total_duration" field in this mutation.
func (m *TrainingMutation) AddedTotalDuration() (r int, exists bool) {
	v := m.addtotal_duration
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalDuration resets all changes to the "total_duration" field.
func (m *TrainingMutation) ResetTotalDuration() {
	m.total_duration = nil
	m.addtotal_duration = nil
}

// SetTextLength sets the "text_length" field.
func (m *TrainingMutation) SetTextLength(i int) {
	m.text_length = &i
	m.addtext_length = nil
}

// TextLength returns the value of the "text_length" field in the mutation.
func (m *TrainingMutation) TextLength() (r int, exists bool) {
	v := m.text_length
	if v == nil {
		return
	}
	return *v, true
}

// OldTextLength returns the old "text_length" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldTextLength(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTextLength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTextLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTextLength: %w", err)
	}
	return oldValue.TextLength, nil
}

// AddTextLength adds i to the "text_length" field.
func (m *TrainingMutation) AddTextLength(i int) {
	if m.addtext_length != nil {
		*m.addtext_length += i
	} else {
		m.addtext_length = &i
	}
}

// AddedTextLength returns the value that was added to the "text_length" field in this mutation.
func (m *TrainingMutation) AddedTextLength() (r int, exists bool) {
	v := m.addtext_length
	if v == nil {
		return
	}
	return *v, true
}

// ResetTextLength resets all changes to the "text_length" field.
func (m *TrainingMutation) ResetTextLength() {
	m.text_length = nil
	m.addtext_length = nil
}

// SetInputsLength sets the "inputs_length" field.
func (m *TrainingMutation) SetInputsLength(i int) {
	m.inputs_length = &i
	m.addinputs_length = nil
}

// InputsLength returns the value of the "inputs_length" field in the mutation.
func (m *TrainingMutation) InputsLength() (r int, exists bool) {
	v := m.inputs_length
	if v == nil {
		return
	}
	return *v, true
}

// OldInputsLength returns the old "inputs_length" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldInputsLength(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInputsLength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInputsLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInputsLength: %w", err)
	}
	return oldValue.InputsLength, nil
}

// AddInputsLength adds i to the "inputs_length" field.
func (m *TrainingMutation) AddInputsLength(i int) {
	if m.addinputs_length != nil {
		*m.addinputs_length += i
	} else {
		m.addinputs_length = &i
	}
}

// AddedInputsLength returns the value that was added to the "inputs_length" field in this mutation.
func (m *TrainingMutation) AddedInputsLength() (r int, exists bool) {
	v := m.addinputs_length
	if v == nil {
		return
	}
	return *v, true
}

// ResetInputsLength resets all changes to the "inputs_length" field.
func (m *TrainingMutation) ResetInputsLength() {
	m.inputs_length = nil
	m.addinputs_length = nil
}

// SetAccuracy sets the "accuracy" field.
func (m *TrainingMutation) SetAccuracy(i int) {
	m.accuracy = &i
	m.addaccuracy = nil
}

// Accuracy returns the value of the "accuracy" field in the mutation.
func (m *TrainingMutation) Accuracy() (r int, exists bool) {
	v := m.accuracy
	if v == nil {
		return
	}
	return *v, true
}

// OldAccuracy returns the old "accuracy" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldAccuracy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccuracy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccuracy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccuracy: %w", err)
	}
	return oldValue.Accuracy, nil
}

// AddAccuracy adds i to the "accuracy" field.
func (m *TrainingMutation) AddAccuracy(i int) {
	if m.addaccuracy != nil {
		*m.addaccuracy += i
	} else {
		m.addaccuracy = &i
	}
}

// AddedAccuracy returns the value that was added to the "accuracy" field in this mutation.
func (m *TrainingMutation) AddedAccuracy() (r int, exists bool) {
	v := m.addaccuracy
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccuracy resets all changes to the "accuracy" field.
func (m *TrainingMutation) ResetAccuracy() {
	m.accuracy = nil
	m.addaccuracy = nil
}

// SetSpeed sets the "speed" field.
func (m *TrainingMutation) SetSpeed(i int) {
	m.speed = &i
	m.addspeed = nil
}

// Speed returns the value of the "speed" field in the mutation.
func (m *TrainingMutation) Speed() (r int, exists bool) {
	v := m.speed
	if v == nil {
		return
	}
	return *v, true
}

// OldSpeed returns the old "speed" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldSpeed(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpeed: %w", err)
	}
	return oldValue.Speed, nil
}

// AddSpeed adds i to the "speed" field.
func (m *TrainingMutation) AddSpeed(i int) {
	if m.addspeed != nil {
		*m.addspeed += i
	} else {
		m.addspeed = &i
	}
}

// AddedSpeed returns the value that was added to the "speed" field in this mutation.
func (m *TrainingMutation) AddedSpeed() (r int, exists bool) {
	v := m.addspeed
	if v == nil {
		return
	}
	return *v, true
}

// ResetSpeed resets all changes to the "speed" field.
func (m *TrainingMutation) ResetSpeed() {
	m.speed = nil
	m.addspeed = nil
}

// Where appends a list predicates to the TrainingMutation builder.
func (m *TrainingMutation) Where(ps ...predicate.Training) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TrainingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TrainingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Training, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TrainingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TrainingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Training).
func (m *TrainingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrainingMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, training.FieldCreatedAt)
	}
	if m.duration != nil {
		fields = append(fields, training.FieldDuration)
	}
	if m.total_duration != nil {
		fields = append(fields, training.FieldTotalDuration)
	}
	if m.text_length != nil {
		fields = append(fields, training.FieldTextLength)
	}
	if m.inputs_length != nil {
		fields = append(fields, training.FieldInputsLength)
	}
	if m.accuracy != nil {
		fields = append(fields, training.FieldAccuracy)
	}
	if m.speed != nil {
		fields = append(fields, training.FieldSpeed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrainingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case training.FieldCreatedAt:
		return m.CreatedAt()
	case training.FieldDuration:
		return m.Duration()
	case training.FieldTotalDuration:
		return m.TotalDuration()
	case training.FieldTextLength:
		return m.TextLength()
	case training.FieldInputsLength:
		return m.InputsLength()
	case training.FieldAccuracy:
		return m.Accuracy()
	case training.FieldSpeed:
		return m.Speed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrainingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case training.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case training.FieldDuration:
		return m.OldDuration(ctx)
	case training.FieldTotalDuration:
		return m.OldTotalDuration(ctx)
	case training.FieldTextLength:
		return m.OldTextLength(ctx)
	case training.FieldInputsLength:
		return m.OldInputsLength(ctx)
	case training.FieldAccuracy:
		return m.OldAccuracy(ctx)
	case training.FieldSpeed:
		return m.OldSpeed(ctx)
	}
	return nil, fmt.Errorf("unknown Training field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrainingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case training.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case training.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case training.FieldTotalDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalDuration(v)
		return nil
	case training.FieldTextLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTextLength(v)
		return nil
	case training.FieldInputsLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInputsLength(v)
		return nil
	case training.FieldAccuracy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccuracy(v)
		return nil
	case training.FieldSpeed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpeed(v)
		return nil
	}
	return fmt.Errorf("unknown Training field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrainingMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, training.FieldDuration)
	}
	if m.addtotal_duration != nil {
		fields = append(fields, training.FieldTotalDuration)
	}
	if m.addtext_length != nil {
		fields = append(fields, training.FieldTextLength)
	}
	if m.addinputs_length != nil {
		fields = append(fields, training.FieldInputsLength)
	}
	if m.addaccuracy != nil {
		fields = append(fields, training.FieldAccuracy)
	}
	if m.addspeed != nil {
		fields = append(fields, training.FieldSpeed)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrainingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case training.FieldDuration:
		return m.AddedDuration()
	case training.FieldTotalDuration:
		return m.AddedTotalDuration()
	case training.FieldTextLength:
		return m.AddedTextLength()
	case training.FieldInputsLength:
		return m.AddedInputsLength()
	case training.FieldAccuracy:
		return m.AddedAccuracy()
	case training.FieldSpeed:
		return m.AddedSpeed()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrainingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case training.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case training.FieldTotalDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalDuration(v)
		return nil
	case training.FieldTextLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTextLength(v)
		return nil
	case training.FieldInputsLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInputsLength(v)
		return nil
	case training.FieldAccuracy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccuracy(v)
		return nil
	case training.FieldSpeed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSpeed(v)
		return nil
	}
	return fmt.Errorf("unknown Training numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrainingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrainingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrainingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Training nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrainingMutation) ResetField(name string) error {
	switch name {
	case training.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case training.FieldDuration:
		m.ResetDuration()
		return nil
	case training.FieldTotalDuration:
		m.ResetTotalDuration()
		return nil
	case training.FieldTextLength:
		m.ResetTextLength()
		return nil
	case training.FieldInputsLength:
		m.ResetInputsLength()
		return nil
	case training.FieldAccuracy:
		m.ResetAccuracy()
		return nil
	case training.FieldSpeed:
		m.ResetSpeed()
		return nil
	}
	return fmt.Errorf("unknown Training field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrainingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrainingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrainingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrainingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrainingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrainingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrainingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Training unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrainingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Training edge %s", name)
}
