// Code generated by ent, DO NOT EDIT.

package training

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Lajule/dac/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldCreatedAt, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldDuration, v))
}

// TotalDuration applies equality check predicate on the "total_duration" field. It's identical to TotalDurationEQ.
func TotalDuration(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldTotalDuration, v))
}

// TextLength applies equality check predicate on the "text_length" field. It's identical to TextLengthEQ.
func TextLength(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldTextLength, v))
}

// InputsLength applies equality check predicate on the "inputs_length" field. It's identical to InputsLengthEQ.
func InputsLength(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldInputsLength, v))
}

// Accuracy applies equality check predicate on the "accuracy" field. It's identical to AccuracyEQ.
func Accuracy(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldAccuracy, v))
}

// Speed applies equality check predicate on the "speed" field. It's identical to SpeedEQ.
func Speed(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldSpeed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldCreatedAt, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldDuration, v))
}

// TotalDurationEQ applies the EQ predicate on the "total_duration" field.
func TotalDurationEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldTotalDuration, v))
}

// TotalDurationNEQ applies the NEQ predicate on the "total_duration" field.
func TotalDurationNEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldTotalDuration, v))
}

// TotalDurationIn applies the In predicate on the "total_duration" field.
func TotalDurationIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldTotalDuration, vs...))
}

// TotalDurationNotIn applies the NotIn predicate on the "total_duration" field.
func TotalDurationNotIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldTotalDuration, vs...))
}

// TotalDurationGT applies the GT predicate on the "total_duration" field.
func TotalDurationGT(v int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldTotalDuration, v))
}

// TotalDurationGTE applies the GTE predicate on the "total_duration" field.
func TotalDurationGTE(v int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldTotalDuration, v))
}

// TotalDurationLT applies the LT predicate on the "total_duration" field.
func TotalDurationLT(v int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldTotalDuration, v))
}

// TotalDurationLTE applies the LTE predicate on the "total_duration" field.
func TotalDurationLTE(v int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldTotalDuration, v))
}

// TextLengthEQ applies the EQ predicate on the "text_length" field.
func TextLengthEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldTextLength, v))
}

// TextLengthNEQ applies the NEQ predicate on the "text_length" field.
func TextLengthNEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldTextLength, v))
}

// TextLengthIn applies the In predicate on the "text_length" field.
func TextLengthIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldTextLength, vs...))
}

// TextLengthNotIn applies the NotIn predicate on the "text_length" field.
func TextLengthNotIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldTextLength, vs...))
}

// TextLengthGT applies the GT predicate on the "text_length" field.
func TextLengthGT(v int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldTextLength, v))
}

// TextLengthGTE applies the GTE predicate on the "text_length" field.
func TextLengthGTE(v int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldTextLength, v))
}

// TextLengthLT applies the LT predicate on the "text_length" field.
func TextLengthLT(v int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldTextLength, v))
}

// TextLengthLTE applies the LTE predicate on the "text_length" field.
func TextLengthLTE(v int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldTextLength, v))
}

// InputsLengthEQ applies the EQ predicate on the "inputs_length" field.
func InputsLengthEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldInputsLength, v))
}

// InputsLengthNEQ applies the NEQ predicate on the "inputs_length" field.
func InputsLengthNEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldInputsLength, v))
}

// InputsLengthIn applies the In predicate on the "inputs_length" field.
func InputsLengthIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldInputsLength, vs...))
}

// InputsLengthNotIn applies the NotIn predicate on the "inputs_length" field.
func InputsLengthNotIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldInputsLength, vs...))
}

// InputsLengthGT applies the GT predicate on the "inputs_length" field.
func InputsLengthGT(v int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldInputsLength, v))
}

// InputsLengthGTE applies the GTE predicate on the "inputs_length" field.
func InputsLengthGTE(v int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldInputsLength, v))
}

// InputsLengthLT applies the LT predicate on the "inputs_length" field.
func InputsLengthLT(v int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldInputsLength, v))
}

// InputsLengthLTE applies the LTE predicate on the "inputs_length" field.
func InputsLengthLTE(v int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldInputsLength, v))
}

// AccuracyEQ applies the EQ predicate on the "accuracy" field.
func AccuracyEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldAccuracy, v))
}

// AccuracyNEQ applies the NEQ predicate on the "accuracy" field.
func AccuracyNEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldAccuracy, v))
}

// AccuracyIn applies the In predicate on the "accuracy" field.
func AccuracyIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldAccuracy, vs...))
}

// AccuracyNotIn applies the NotIn predicate on the "accuracy" field.
func AccuracyNotIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldAccuracy, vs...))
}

// AccuracyGT applies the GT predicate on the "accuracy" field.
func AccuracyGT(v int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldAccuracy, v))
}

// AccuracyGTE applies the GTE predicate on the "accuracy" field.
func AccuracyGTE(v int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldAccuracy, v))
}

// AccuracyLT applies the LT predicate on the "accuracy" field.
func AccuracyLT(v int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldAccuracy, v))
}

// AccuracyLTE applies the LTE predicate on the "accuracy" field.
func AccuracyLTE(v int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldAccuracy, v))
}

// SpeedEQ applies the EQ predicate on the "speed" field.
func SpeedEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldSpeed, v))
}

// SpeedNEQ applies the NEQ predicate on the "speed" field.
func SpeedNEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldSpeed, v))
}

// SpeedIn applies the In predicate on the "speed" field.
func SpeedIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldSpeed, vs...))
}

// SpeedNotIn applies the NotIn predicate on the "speed" field.
func SpeedNotIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldSpeed, vs...))
}

// SpeedGT applies the GT predicate on the "speed" field.
func SpeedGT(v int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldSpeed, v))
}

// SpeedGTE applies the GTE predicate on the "speed" field.
func SpeedGTE(v int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldSpeed, v))
}

// SpeedLT applies the LT predicate on the "speed" field.
func SpeedLT(v int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldSpeed, v))
}

// SpeedLTE applies the LTE predicate on the "speed" field.
func SpeedLTE(v int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldSpeed, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Training) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Training) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Training) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		p(s.Not())
	})
}
