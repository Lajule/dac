// Code generated by ent, DO NOT EDIT.

package training

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Lajule/dac/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldCreatedAt, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldDuration, v))
}

// Precision applies equality check predicate on the "precision" field. It's identical to PrecisionEQ.
func Precision(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldPrecision, v))
}

// Speed applies equality check predicate on the "speed" field. It's identical to SpeedEQ.
func Speed(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldSpeed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldCreatedAt, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldDuration, v))
}

// PrecisionEQ applies the EQ predicate on the "precision" field.
func PrecisionEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldPrecision, v))
}

// PrecisionNEQ applies the NEQ predicate on the "precision" field.
func PrecisionNEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldPrecision, v))
}

// PrecisionIn applies the In predicate on the "precision" field.
func PrecisionIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldPrecision, vs...))
}

// PrecisionNotIn applies the NotIn predicate on the "precision" field.
func PrecisionNotIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldPrecision, vs...))
}

// PrecisionGT applies the GT predicate on the "precision" field.
func PrecisionGT(v int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldPrecision, v))
}

// PrecisionGTE applies the GTE predicate on the "precision" field.
func PrecisionGTE(v int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldPrecision, v))
}

// PrecisionLT applies the LT predicate on the "precision" field.
func PrecisionLT(v int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldPrecision, v))
}

// PrecisionLTE applies the LTE predicate on the "precision" field.
func PrecisionLTE(v int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldPrecision, v))
}

// SpeedEQ applies the EQ predicate on the "speed" field.
func SpeedEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldSpeed, v))
}

// SpeedNEQ applies the NEQ predicate on the "speed" field.
func SpeedNEQ(v int) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldSpeed, v))
}

// SpeedIn applies the In predicate on the "speed" field.
func SpeedIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldSpeed, vs...))
}

// SpeedNotIn applies the NotIn predicate on the "speed" field.
func SpeedNotIn(vs ...int) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldSpeed, vs...))
}

// SpeedGT applies the GT predicate on the "speed" field.
func SpeedGT(v int) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldSpeed, v))
}

// SpeedGTE applies the GTE predicate on the "speed" field.
func SpeedGTE(v int) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldSpeed, v))
}

// SpeedLT applies the LT predicate on the "speed" field.
func SpeedLT(v int) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldSpeed, v))
}

// SpeedLTE applies the LTE predicate on the "speed" field.
func SpeedLTE(v int) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldSpeed, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Training) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Training) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Training) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		p(s.Not())
	})
}
